fn main() {
    println!("Hello, world!");
    //语句与表达式
    //1.语句  在rust中，执行操作而不返回值的代码片段
    //例1：
    let x:i32 = 3; //这是一个语句

    //2.表达式  执行操作并且返回值的代码片段
    //例1:函数调用
    let sum:i32 = plus_five(5);
    //函数一定具有返回值，当没有明确的返回值时，将会返回(),函数调用一定是表达式
    //例2:返回值的代码片段
    let y ={
        x+sum  //这是一个表达式
    };  //整个代码块的值就是x+sum，也就是y的结果
    
    //例3:
    let z = 
    {
        x+y+sum; //当一个表达式末尾加上分号，就变成了一个语句。它只会进行相加操作，而不返回值
    }; //整个代码块的结果就是(),而z的值就是代码块的结果

    //例4:
    let boolean = if y>sum {x} else {y}; //这是一个表达式

}
//在rust中，函数不必声明在调用者前，之要在全局作用域内，声明都可被调用
//rust声明一个函数时 其形式参数的类型必须被显示的声明
fn plus_five(x:i32)->i32
{
    x+5  //在rust中，函数的返回值取决于函数体中最后一个表达式
        //若想提前返回值，可以使用return
}
